name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ] # Run on all branches for PRs

jobs:
  lint-test-build:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn' # Cache Yarn dependencies

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linters
        run: yarn lint # Assumes root package.json has a lint script running workspace lints

      - name: Run tests
        run: yarn test # Assumes root package.json has a test script running workspace tests

      - name: Build backend
        run: yarn build:backend # Assumes root package.json script: "yarn workspace backend build"

      - name: Build frontend
        run: yarn build:frontend # Assumes root package.json script: "yarn workspace frontend build"

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: lint-test-build # Ensure lint, test, and build pass before deploying
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions: # Needed for Workload Identity Federation
      contents: 'read'
      id-token: 'write'

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      FRONTEND_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend
      BACKEND_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend
      GCP_REGION: europe-west1 # Set region to europe-west1
      # TERRAFORM_DIR: ./terraform # No longer needed as we specify working-directory per step

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud via Workload Identity Federation
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      # Docker Image Builds
      - name: Build Frontend Docker image
        run: docker build -t ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} -f frontend/Dockerfile ./frontend

      - name: Push Frontend Docker image to GCR
        run: |
          docker push ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          echo "TF_VAR_frontend_image_name=${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Backend Docker image
        run: docker build -t ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} -f backend/Dockerfile ./backend

      - name: Push Backend Docker image to GCR
        run: |
          docker push ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
          echo "TF_VAR_backend_image_name=${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

      # Terraform for foundations Layer
      # Removed 'Set DB Migrations User Password Env Var' step as it's no longer used

      - name: 'Setup Terraform (Foundations)'
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: "1.0.0" # Optional: specify Terraform version
      - name: 'Terraform Init (Foundations)'
        run: terraform init
        working-directory: terraform/foundations

      - name: 'Terraform Validate (Foundations)'
        run: terraform validate
        working-directory: terraform/foundations

      - name: 'Terraform Plan (Foundations)'
        run: |
          terraform plan -out=tfplan \
            -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}"
            # TF_VAR_db_migrations_user_password is now in $GITHUB_ENV from previous step
        working-directory: terraform/foundations
        env:
          TF_VAR_gcp_region: ${{ env.GCP_REGION }} # GCP_REGION is an env var for the job

      - name: 'Terraform Apply (Foundations)'
        id: apply_foundations # Added id for this step
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Basic condition for main branch
        run: |
          terraform apply -auto-approve tfplan
          echo "INFO: Exposing Terraform outputs for foundations layer..."
          echo "db_instance_connection_name=$(terraform output -raw db_instance_connection_name)" >> $GITHUB_OUTPUT
          echo "app_db_name_output=$(terraform output -raw app_db_name_output)" >> $GITHUB_OUTPUT
          # Output backend_service_account_email, not migrations_service_account_email
          echo "backend_service_account_email=$(terraform output -raw backend_service_account_email)" >> $GITHUB_OUTPUT
        working-directory: terraform/foundations
        env:
          TF_VAR_gcp_region: ${{ env.GCP_REGION }}

      # Removed Terraform steps for services/backend layer
      # Removed explicit DB Migration step

      - name: 'Deploy Backend Service to Cloud Run'
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DB_INSTANCE_CONNECTION_NAME: ${{ steps.apply_foundations.outputs.db_instance_connection_name }}
          APP_DB_NAME: ${{ steps.apply_foundations.outputs.app_db_name_output }}
          BACKEND_SA_EMAIL: ${{ steps.apply_foundations.outputs.backend_service_account_email }}
          GCP_PROJECT_ID_FROM_SECRETS: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION_FROM_ENV: ${{ env.GCP_REGION }}
          # TF_VAR_backend_image_name is available in GITHUB_ENV from Docker build step
          # No need to explicitly reference env.TF_VAR_backend_image_name if it's in GITHUB_ENV
          # However, to be explicit for the gcloud command, we can pass it:
          BACKEND_IMAGE_TO_DEPLOY: ${{ env.TF_VAR_backend_image_name }}

        run: |
          echo "Deploying Backend Service: ${BACKEND_IMAGE_TO_DEPLOY}"
          gcloud run deploy bjj-academy-backend-service \
            --image "${BACKEND_IMAGE_TO_DEPLOY}" \
            --platform managed \
            --region "${GCP_REGION_FROM_ENV}" \
            --project "${GCP_PROJECT_ID_FROM_SECRETS}" \
            --service-account "${BACKEND_SA_EMAIL}" \
            --port 3000 \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,PORT=3000,DB_INSTANCE_CONNECTION_NAME=${DB_INSTANCE_CONNECTION_NAME},DB_NAME=${APP_DB_NAME},DB_USER_NAME=${BACKEND_SA_EMAIL},DB_AUTH_MODE=IAM,GCP_REGION=${GCP_REGION_FROM_ENV}" \
            --min-instances 0 \
            --max-instances 2

      - name: 'Deploy Frontend Service to Cloud Run'
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GCP_PROJECT_ID_FROM_SECRETS: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION_FROM_ENV: ${{ env.GCP_REGION }}
          # TF_VAR_frontend_image_name is available in GITHUB_ENV from Docker build step
          FRONTEND_IMAGE_TO_DEPLOY: ${{ env.TF_VAR_frontend_image_name }}
        run: |
          echo "Deploying Frontend Service: ${FRONTEND_IMAGE_TO_DEPLOY}"
          gcloud run deploy bjj-academy-frontend-service \
            --image "${FRONTEND_IMAGE_TO_DEPLOY}" \
            --platform managed \
            --region "${GCP_REGION_FROM_ENV}" \
            --project "${GCP_PROJECT_ID_FROM_SECRETS}" \
            --allow-unauthenticated \
            --port 80 \
            --min-instances 0 \
            --max-instances 2
