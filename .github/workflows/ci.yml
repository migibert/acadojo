name: CI

on:
  push:
    branches: [ "fix/deployment-error" ]
  pull_request:
    branches: [ "**" ] # Run on all branches for PRs

jobs:
  lint-test-build:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn' # Cache Yarn dependencies

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linters
        run: yarn lint # Assumes root package.json has a lint script running workspace lints

      - name: Run tests
        run: yarn test # Assumes root package.json has a test script running workspace tests

      - name: Build backend
        run: yarn build:backend # Assumes root package.json script: "yarn workspace backend build"

      - name: Build frontend
        run: yarn build:frontend # Assumes root package.json script: "yarn workspace frontend build"

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: lint-test-build # Ensure lint, test, and build pass before deploying
    if: github.ref == 'refs/heads/fix/deployment-error' && github.event_name == 'push'

    permissions: # Needed for Workload Identity Federation
      contents: 'read'
      id-token: 'write'

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      FRONTEND_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend
      BACKEND_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend
      GCP_REGION: europe-west1 # Set region to europe-west1
      TERRAFORM_DIR: ./terraform # Assuming terraform files are in a 'terraform' directory at the root

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud via Workload Identity Federation
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }} # e.g. projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }} # e.g. my-service-account@my-project.iam.gserviceaccount.com

      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: "1.0.0" # Optional: specify Terraform version

      - name: Terraform Init
        run: terraform -chdir=${{ env.TERRAFORM_DIR }} init

      - name: Terraform Output Frontend Service Name
        id: tf_frontend_service
        env:
          TF_CLI_ARGS: "-no-color"
        run: echo "name=$(terraform -chdir=${{ env.TERRAFORM_DIR }} output -raw frontend_cloud_run_service_name | sed -E 's/\x1B\[[0-9;]*[mK]//g; s/^[^a-zA-Z0-9]*//')" >> $GITHUB_OUTPUT

      - name: Terraform Output Backend Service Name
        id: tf_backend_service
        env:
          TF_CLI_ARGS: "-no-color"
        run: echo "name=$(terraform -chdir=${{ env.TERRAFORM_DIR }} output -raw backend_cloud_run_service_name | sed -E 's/\x1B\[[0-9;]*[mK]//g; s/^[^a-zA-Z0-9]*//')" >> $GITHUB_OUTPUT

      # Frontend Deployment
      - name: Build Frontend Docker image
        run: docker build -t $FRONTEND_IMAGE_NAME:latest -t $FRONTEND_IMAGE_NAME:${{ github.sha }} -f frontend/Dockerfile ./frontend

      - name: Push Frontend Docker image to GCR
        run: |
          docker push $FRONTEND_IMAGE_NAME:latest
          docker push $FRONTEND_IMAGE_NAME:${{ github.sha }}

      - name: Deploy Frontend to Cloud Run
        env:
          TF_FRONTEND_SERVICE_NAME: ${{ steps.tf_frontend_service.outputs.name }}
        run: |
          gcloud run deploy $TF_FRONTEND_SERVICE_NAME \
            --image $FRONTEND_IMAGE_NAME:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --project ${{ env.GCP_PROJECT_ID }} \
            --quiet

      # Backend Deployment
      - name: Build Backend Docker image
        run: docker build -t $BACKEND_IMAGE_NAME:latest -t $BACKEND_IMAGE_NAME:${{ github.sha }} -f backend/Dockerfile ./backend

      - name: Push Backend Docker image to GCR
        run: |
          docker push $BACKEND_IMAGE_NAME:latest
          docker push $BACKEND_IMAGE_NAME:${{ github.sha }}

      - name: Deploy Backend to Cloud Run
        env:
          TF_BACKEND_SERVICE_NAME: ${{ steps.tf_backend_service.outputs.name }}
        run: |
          gcloud run deploy $TF_BACKEND_SERVICE_NAME \
            --image $BACKEND_IMAGE_NAME:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --project ${{ env.GCP_PROJECT_ID }} \
            --quiet
